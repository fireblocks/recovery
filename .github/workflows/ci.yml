name: CI

on:
  push:
    branches: [main]

jobs:
  build:
    name: Build on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    timeout-minutes: 20

    strategy:
      matrix:
        # TODO: Add OS "windows-latest" once EV certificate code signing is configured
        os: [ubuntu-latest, macos-12]

    steps:
      - name: Check out code
        uses: actions/checkout@v3
        with:
          fetch-depth: 2

      - name: Setup Node.js environment
        uses: actions/setup-node@v3
        with:
          node-version: lts/gallium
          cache: yarn

      - name: Setup Python environment
        uses: actions/setup-python@v4
        with:
          cache: pip

      - name: Install dependencies
        run: |
          brew install automake
          yarn install --frozen-lockfile

      - name: Prepare for macOS app notarization
        if: startsWith(matrix.os, 'macos')
        env:
          APPLE_API_KEY: ${{ secrets.APPLE_API_KEY }}
          APPLE_API_KEY_ID: ${{ secrets.APPLE_API_KEY_ID }}
          APPLE_API_KEY_ISSUER: ${{ secrets.APPLE_API_KEY_ISSUER }}
          CSC_LINK: ${{ secrets.CSC_LINK }}
          CSC_KEY_PASSWORD: ${{ secrets.CSC_KEY_PASSWORD }}
        run: |
          # Set temporary environment variables
          KEYCHAIN_PROFILE="notarization"
          KEYCHAIN_PASSWORD="$(openssl rand -base64 12)"
          KEYCHAIN_PATH="$RUNNER_TEMP/code-signing.keychain-db"
          CSC_PATH="$RUNNER_TEMP/build_certificate.p12"
          APPLE_KEY_DIR_PATH="$HOME/private_keys"
          APPLE_API_KEY_PATH="$APPLE_KEY_DIR_PATH/AuthKey_$APPLE_API_KEY_ID.p8"

          # Create code signing Keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" "$KEYCHAIN_PATH"
          security set-keychain-settings -lut 21600 "$KEYCHAIN_PATH"
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" "$KEYCHAIN_PATH"

          # Write App Store Connect API key for Notary service
          mkdir -p "$APPLE_KEY_DIR_PATH"
          echo -n "$APPLE_API_KEY" > "$APPLE_API_KEY_PATH"

          # Import Notary service credentials to Keychain
          xcrun notarytool store-credentials \
            -k="$APPLE_API_KEY_PATH" \
            -d="$APPLE_API_KEY_ID" \
            -i="$APPLE_API_KEY_ISSUER" \
            --keychain="$KEYCHAIN_PATH" \
            "$KEYCHAIN_PROFILE"

          # Write code signing certificate
          echo -n "$CSC_LINK" | base64 --decode --output "$CSC_PATH"

          # Import code signing certificate to Keychain
          security import "$CSC_PATH" -P "$CSC_KEY_PASSWORD" -A -t cert -f pkcs12 -k "$KEYCHAIN_PATH"
          security list-keychain -d user -s "$KEYCHAIN_PATH"

          # Delete code signing certificate
          rm -rf "$CSC_PATH"

          # Set persistent environment variables
          echo "KEYCHAIN_PROFILE=$KEYCHAIN_PROFILE" >> $GITHUB_ENV
          echo "KEYCHAIN_PATH=$KEYCHAIN_PATH" >> $GITHUB_ENV
          echo "APPLE_KEY_DIR_PATH=$APPLE_KEY_DIR_PATH" >> $GITHUB_ENV

      - name: Build packages
        run: yarn build
        env:
          APPLE_KEYCHAIN: ${{ env.KEYCHAIN_PATH }}
          APPLE_KEYCHAIN_PROFILE: ${{ env.KEYCHAIN_PROFILE }}
          CODESIGN_IDENTITY: ${{ secrets.CODESIGN_IDENTITY }}
          CSC_LINK: ${{ startsWith(matrix.os, 'macos') && secrets.CSC_LINK || '' }}
          CSC_KEY_PASSWORD: ${{ startsWith(matrix.os, 'macos') && secrets.CSC_KEY_PASSWORD || '' }}
          TURBO_TEAM: ${{ secrets.TURBO_TEAM }}
          TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}

      - name: Upload Recovery Utility artifact
        uses: actions/upload-artifact@v3
        with:
          name: Recovery Utility
          path: |
            packages/app/dist/*.AppImage
            packages/app/dist/*.exe
            packages/app/dist/*.zip

      - name: Upload Recovery Relay artifact
        uses: actions/upload-artifact@v3
        with:
          name: Recovery Relay
          path: packages/relay/out/

      - name: Clean up Apple Developer secrets
        if: ${{ startsWith(matrix.os, 'macos') && always() }}
        env:
          KEYCHAIN_PATH: ${{ env.KEYCHAIN_PATH }}
          APPLE_KEY_DIR_PATH: ${{ env.APPLE_KEY_DIR_PATH }}
        run: |
          security delete-keychain "$KEYCHAIN_PATH"
          rm -rf "$APPLE_KEY_DIR_PATH"

  fossa-scan:
    name: Compliance & security check
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Check out code
        uses: actions/checkout@v3
        with:
          fetch-depth: 2

      - name: FOSSA scan
        uses: fossas/fossa-action@main
        with:
          api-key: ${{ secrets.FOSSA_API_KEY }}
          branch: ${{ github.head_ref || github.ref_name }}
          run-tests: false

  pr:
    name: Version packages
    runs-on: ubuntu-latest
    needs: [build, fossa-scan]
    steps:
      - name: Check out code
        uses: actions/checkout@v3
        with:
          fetch-depth: 2

      - name: Setup Node.js environment
        uses: actions/setup-node@v3
        with:
          node-version: lts/gallium
          cache: "yarn"

      - name: Create release pull request
        id: changesets
        uses: changesets/action@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
